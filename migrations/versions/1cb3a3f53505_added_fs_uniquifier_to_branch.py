"""Added 'fs_uniquifier' to Branch

Revision ID: 1cb3a3f53505
Revises: 210fb50d1f17
Create Date: 2025-02-01 11:44:55.797249

"""

import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision = "1cb3a3f53505"
down_revision = "210fb50d1f17"
branch_labels = None
depends_on = None

branch_table = table(
    "branch", column("id", sa.Integer), column("fs_uniquifier", sa.String(64))
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1️⃣: Add column as NULLABLE first
    with op.batch_alter_table("branch", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("fs_uniquifier", sa.String(length=64), nullable=True)
        )

    # Step 2️⃣: Fill existing rows with unique values
    conn = op.get_bind()
    branches = conn.execute(sa.text("SELECT id FROM branch")).fetchall()
    for branch in branches:
        conn.execute(
            sa.text("UPDATE branch SET fs_uniquifier = :uuid WHERE id = :id"),
            {"uuid": str(uuid.uuid4()), "id": branch.id},
        )

    # Step 3️⃣: Alter column to NOT NULL
    with op.batch_alter_table("branch", schema=None) as batch_op:
        batch_op.alter_column(
            "fs_uniquifier", existing_type=sa.String(length=64), nullable=False
        )
        batch_op.create_unique_constraint("uq_branch_fs_uniquifier", ["fs_uniquifier"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("branch", schema=None) as batch_op:
        batch_op.drop_constraint(None, type_="unique")
        batch_op.drop_column("fs_uniquifier")

    # ### end Alembic commands ###
